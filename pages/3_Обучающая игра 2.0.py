import streamlit as st
import requests
import json
import re
from gigachat import GigaChat

def get_access_token() -> str:
  url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"

  payload='scope=GIGACHAT_API_PERS'
  headers = {
    'Content-Type': 'application/x-www-form-urlencoded',
    'Accept': 'application/json',
    'RqUID': '254ee246-4b6b-49e3-b72e-29c60d84e69d',
    'Authorization': 'Basic YjA2NmI2NDAtZTU3ZC00ZDJkLTk3OWMtODRmYzkyNjAyZjI2OjczYzc1NjdkLWNjNWEtNDJmMS04ZGI3LWFhZTQxZjBlM2UxOA=='
  }

  response = requests.request("POST", url, headers=headers, data=payload, verify=False)
  access_token = response.json()["access_token"]
  return access_token

with GigaChat(credentials=..., verify_ssl_certs=False) as giga:
    response = giga.chat("–ö–∞–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è—é—Ç –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏ –Ω–∞ –¥–æ–º?")
    print(response.choices[0].message.content)

def generate_test():
    access_token = get_access_token()
    if not access_token:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return None
    with GigaChat(verify_ssl_certs=False) as giga:
        headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'Authorization': f'Bearer {access_token}'
        }
        temperature: 0.7
        max_tokens: 500 
        prompt =  f"""
                    –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 10 —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–º–µ '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python'.
                    –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞, –æ–¥–∏–Ω –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º.
                    –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞:
                    –í–æ–ø—Ä–æ—Å 1: [—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞]
                    –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:
                    1. [–≤–∞—Ä–∏–∞–Ω—Ç 1]
                    2. [–≤–∞—Ä–∏–∞–Ω—Ç 2]
                    3. [–≤–∞—Ä–∏–∞–Ω—Ç 3]
                    –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: [–Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞]
                    """
        response = giga.chat(prompt)
        return response

st.title("–°—Ä–∞–∂–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ Python")

if "health" not in st.session_state:
    st.session_state.health = 100
if "current_question" not in st.session_state:
    st.session_state.current_question = 0
if "questions" not in st.session_state:
    st.session_state.questions = []
if "game_over" not in st.session_state:
    st.session_state.game_over = False

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å—Ä–∞–∂–µ–Ω–∏—è
if st.button("–ù–∞—á–∞—Ç—å —Å—Ä–∞–∂–µ–Ω–∏–µ"):
    questions = generate_test()
    if questions:
        st.session_state.questions = questions
        st.session_state.current_question = 0
        st.session_state.health = 100
        st.session_state.game_over = False

# –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –∏–≥—Ä–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
if st.session_state.questions and not st.session_state.game_over:
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–æ—Å–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
    st.write(f"–ó–¥–æ—Ä–æ–≤—å–µ: {st.session_state.health}")
    st.progress(st.session_state.health / 100)

    # –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
question = st.session_state.questions[st.session_state.current_question]
st.write(f"**–í–æ–ø—Ä–æ—Å {st.session_state.current_question + 1}:** {question['question']}")

    # –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
selected_option = st.radio(
    "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:",
    question["options"],
    key=f"question_{st.session_state.current_question}"
)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
if st.button("–û—Ç–≤–µ—Ç–∏—Ç—å"):
    if question["correct"] is not None:
        correct_answer = question["options"][question["correct"] - 1]
        if selected_option == correct_answer:
            st.session_state.health -= 10
            if st.session_state.health <= 0:
                st.session_state.health = 0
                st.session_state.game_over = True
                st.success("–í—ã –ø–æ–±–µ–¥–∏–ª–∏! üéâ")
             else:
                st.success("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! –ó–¥–æ—Ä–æ–≤—å–µ —É–º–µ–Ω—å—à–µ–Ω–æ –Ω–∞ 10.")
                st.session_state.current_question += 1
                if st.session_state.current_question >= len(st.session_state.questions):
                    st.session_state.game_over = True
                    st.success("–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã! –í—ã –ø–æ–±–µ–¥–∏–ª–∏! üéâ")
         else:
            st.session_state.game_over = True
            st.error("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! üò¢")
      else:
          st.error("–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.")
