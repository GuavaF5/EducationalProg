import streamlit as st
import requests
import json
import re

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è access token

def get_access_token() -> str:
  url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"

  payload='scope=GIGACHAT_API_PERS'
  headers = {
    'Content-Type': 'application/x-www-form-urlencoded',
    'Accept': 'application/json',
    'RqUID': '254ee246-4b6b-49e3-b72e-29c60d84e69d',
    'Authorization': 'Basic YjA2NmI2NDAtZTU3ZC00ZDJkLTk3OWMtODRmYzkyNjAyZjI2OjczYzc1NjdkLWNjNWEtNDJmMS04ZGI3LWFhZTQxZjBlM2UxOA=='
  }

  response = requests.request("POST", url, headers=headers, data=payload, verify=False)
  access_token = response.json()["access_token"]
  return access_token


# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
def generate_backup_questions():
    questions = [
        {
            "question": "–ö–∞–∫–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è –≤ Python?",
            "options": ["dict()", "[]", "set()"],
            "correct": 1
        },
        {
            "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –≤ Python?",
            "options": [
                "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑–º–µ–Ω—è—é—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π",
                "–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏",
                "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π"
            ],
            "correct": 1
        },
        {
            "question": "–ö–∞–∫ –≤—ã–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ Python?",
            "options": ["print(var)", "echo var", "puts var"],
            "correct": 1
        },
        {
            "question": "–ö–∞–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Python –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏ –∏–º–µ–µ—Ç –∏–Ω–¥–µ–∫—Å—ã?",
            "options": ["–°–ª–æ–≤–∞—Ä—å", "–°–ø–∏—Å–æ–∫", "–ú–Ω–æ–∂–µ—Å—Ç–≤–æ"],
            "correct": 2
        },
        {
            "question": "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤ Python?",
            "options": [
                "def function_name(): ...",
                "function_name = lambda x: x + 1",
                "function_name = def x: x + 1"
            ],
            "correct": 1
        }
    ]
    return questions

# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
def parse_questions(text):
    if not text:
        return []

    questions = []
    lines = text.split("\n")
    current_question = None

    for line in lines:
        line = line.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
        if "–í–æ–ø—Ä–æ—Å" in line or line.startswith(("1.", "2.", "3.", "4.", "5.")):
            if current_question:
                questions.append(current_question)
            question_text = line.split(":")[-1].strip()  # –£–±–∏—Ä–∞–µ–º "–í–æ–ø—Ä–æ—Å X:"
            current_question = {"question": question_text, "options": [], "correct": None}

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
        elif line.startswith(("1.", "2.", "3.")):
            if current_question:
                option = line.split(".", 1)[-1].strip()  # –£–±–∏—Ä–∞–µ–º "1.", "2.", "3."
                current_question["options"].append(option)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        elif "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç" in line:
            if current_question:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                match = [s for s in line.split() if s.isdigit()]
                if match:
                    correct_answer = int(match[0])
                    current_question["correct"] = correct_answer

    if current_question:
        questions.append(current_question)
    return questions

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
def generate_questions():
    try:
        # –ü–æ–ª—É—á–∞–µ–º access token
        access_token = get_access_token()
        if not access_token:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
            return None

        # URL API Gigachat
        API_URL = 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions'

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        headers = {
            'Authorization': f'Bearer {access_token}',
            'Content-Type': 'application/json'
        }

        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        data = {
            "model": "GigaChat",  # –£–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–µ–ª—å
            "messages": [
                {
                    "role": "user",
                    "content": f"""
                    –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 10 —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–º–µ '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python'.
                    –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞, –æ–¥–∏–Ω –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º.
                    –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞:
                    –í–æ–ø—Ä–æ—Å 1: [—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞]
                    –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:
                    1. [–≤–∞—Ä–∏–∞–Ω—Ç 1]
                    2. [–≤–∞—Ä–∏–∞–Ω—Ç 2]
                    3. [–≤–∞—Ä–∏–∞–Ω—Ç 3]
                    –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: [–Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞]
                    """
                }
            ],
            "temperature": 0.7,
            "max_tokens": 500  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        }

        # –û—Ç–ø—Ä–∞–≤–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞ –∫ API
        response = requests.post(API_URL, headers=headers, json=data, verify=False)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞
        if response.status_code == 200:
            # –ü–∞—Ä—Å–∏–Ω–≥ JSON –æ—Ç–≤–µ—Ç–∞
            result = response.json()
            if "choices" not in result or not result["choices"]:
                st.error("–û—Ç–≤–µ—Ç –æ—Ç API –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—Ä–æ—Å.")
                return None

            generated_text = result["choices"][0].get("message", {}).get("content")
            if not generated_text:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ API.")
                return None

            # –ü–∞—Ä—Å–∏–Ω–≥ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
            questions = parse_questions(generated_text)
            if not questions:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.")
                questions = generate_backup_questions()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            for i, question in enumerate(questions):
                if question["correct"] is None:
                    st.error(f"–í–æ–ø—Ä–æ—Å {i + 1} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.")
                    questions = generate_backup_questions()
                    break

            return questions
        else:
            st.error(f"–û—à–∏–±–∫–∞: {response.status_code}")
            st.write(response.text)
            return None
    except Exception as e:
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return None

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("–°—Ä–∞–∂–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ Python")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
if "health" not in st.session_state:
    st.session_state.health = 100
if "current_question" not in st.session_state:
    st.session_state.current_question = 0
if "questions" not in st.session_state:
    st.session_state.questions = []
if "game_over" not in st.session_state:
    st.session_state.game_over = False

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å—Ä–∞–∂–µ–Ω–∏—è
if st.button("–ù–∞—á–∞—Ç—å —Å—Ä–∞–∂–µ–Ω–∏–µ"):
    questions = generate_questions()
    if questions:
        st.session_state.questions = questions
        st.session_state.current_question = 0
        st.session_state.health = 100
        st.session_state.game_over = False

# –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –∏–≥—Ä–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
if st.session_state.questions and not st.session_state.game_over:
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–æ—Å–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
    st.write(f"–ó–¥–æ—Ä–æ–≤—å–µ: {st.session_state.health}")
    st.progress(st.session_state.health / 100)

    # –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    question = st.session_state.questions[st.session_state.current_question]
    st.write(f"**–í–æ–ø—Ä–æ—Å {st.session_state.current_question + 1}:** {question['question']}")

    # –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    selected_option = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç:",
        question["options"],
        key=f"question_{st.session_state.current_question}"
    )

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
    if st.button("–û—Ç–≤–µ—Ç–∏—Ç—å"):
        if question["correct"] is not None:
            correct_answer = question["options"][question["correct"] - 1]
            if selected_option == correct_answer:
                st.session_state.health -= 10
                if st.session_state.health <= 0:
                    st.session_state.health = 0
                    st.session_state.game_over = True
                    st.success("–í—ã –ø–æ–±–µ–¥–∏–ª–∏! üéâ")
                else:
                    st.success("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! –ó–¥–æ—Ä–æ–≤—å–µ —É–º–µ–Ω—å—à–µ–Ω–æ –Ω–∞ 10.")
                    st.session_state.current_question += 1
                    if st.session_state.current_question >= len(st.session_state.questions):
                        st.session_state.game_over = True
                        st.success("–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã! –í—ã –ø–æ–±–µ–¥–∏–ª–∏! üéâ")
            else:
                st.session_state.game_over = True
                st.error("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! üò¢")
        else:
            st.error("–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.")

# –ï—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
if st.session_state.game_over:
    if st.session_state.health <= 0:
        st.success("–í—ã –ø–æ–±–µ–¥–∏–ª–∏! üéâ")
    else:
        st.error("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! üò¢")
